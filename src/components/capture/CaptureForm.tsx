
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { TooltipButton } from "../ui/tooltip-button";
import { Sparkles, X, Save, RotateCcw } from "lucide-react";
import { toast } from "sonner";
import { useNavigate } from 'react-router-dom';

interface CaptureFormProps {
  onSave?: (data: { title: string; content: string; summary?: string }) => void;
}

const CaptureForm: React.FC<CaptureFormProps> = ({ onSave }) => {
  const navigate = useNavigate();
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const [summary, setSummary] = useState("");
  const [isSummarizing, setIsSummarizing] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  const handleSummarize = async () => {
    if (!content.trim()) {
      toast.error("Please add some content to summarize");
      return;
    }

    setIsSummarizing(true);
    
    // Simulate AI summarization
    setTimeout(() => {
      const summaryText = `This is a simulated AI summary of the captured content. In a real implementation, this would be generated by an AI service based on the content provided.`;
      setSummary(summaryText);
      setIsSummarizing(false);
      toast.success("Content summarized!");
    }, 1500);
  };

  const handleSave = () => {
    if (!title.trim()) {
      toast.error("Please add a title");
      return;
    }

    if (!content.trim()) {
      toast.error("Please add some content");
      return;
    }

    setIsSaving(true);

    // Simulate saving
    setTimeout(() => {
      if (onSave) {
        onSave({ title, content, summary });
      }
      
      setIsSaving(false);
      toast.success("Captured successfully!");
      navigate("/");
    }, 800);
  };

  const handleCancel = () => {
    navigate(-1);
  };

  return (
    <Card className="w-full max-w-3xl mx-auto">
      <CardHeader>
        <Input
          placeholder="Add a title..."
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="text-xl font-medium border-none px-0 focus-visible:ring-0"
        />
      </CardHeader>
      <CardContent>
        <Textarea
          placeholder="Capture your thoughts, meeting notes, or paste content here..."
          value={content}
          onChange={(e) => setContent(e.target.value)}
          className="capture-textarea min-h-[200px]"
        />
        
        {summary && (
          <div className="mt-4 p-4 bg-secondary/50 rounded-md border">
            <div className="flex items-center gap-2 mb-2">
              <Sparkles className="h-4 w-4 text-purple-500" />
              <h3 className="font-medium text-sm">AI Summary</h3>
            </div>
            <p className="text-muted-foreground text-sm">{summary}</p>
          </div>
        )}
      </CardContent>
      <CardFooter className="flex justify-between">
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            size="sm" 
            onClick={handleCancel}
          >
            <X className="h-4 w-4 mr-1" />
            Cancel
          </Button>
          
          <TooltipButton
            tooltip="Generate AI summary"
            variant="outline"
            size="sm"
            onClick={handleSummarize}
            disabled={!content.trim() || isSummarizing}
          >
            {isSummarizing ? (
              <RotateCcw className="h-4 w-4 mr-1 animate-spin" />
            ) : (
              <Sparkles className="h-4 w-4 mr-1" />
            )}
            Summarize
          </TooltipButton>
        </div>
        
        <Button 
          onClick={handleSave}
          disabled={!title.trim() || !content.trim() || isSaving}
        >
          {isSaving ? (
            <RotateCcw className="h-4 w-4 mr-1 animate-spin" />
          ) : (
            <Save className="h-4 w-4 mr-1" />
          )}
          Save
        </Button>
      </CardFooter>
    </Card>
  );
};

export default CaptureForm;
